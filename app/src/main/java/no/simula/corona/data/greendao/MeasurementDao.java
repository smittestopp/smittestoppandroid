package no.simula.corona.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MEASUREMENT".
 */
public class MeasurementDao extends AbstractDao<Measurement, Long> {

    public static final String TABLENAME = "MEASUREMENT";

    /**
     * Properties of entity Measurement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property LatLongAccuracy = new Property(4, Double.class, "latLongAccuracy", false, "LAT_LONG_ACCURACY");
        public final static Property Altitude = new Property(5, Double.class, "altitude", false, "ALTITUDE");
        public final static Property AltitudeAccuracy = new Property(6, Double.class, "altitudeAccuracy", false, "ALTITUDE_ACCURACY");
        public final static Property Speed = new Property(7, Double.class, "speed", false, "SPEED");
        public final static Property SpeedAccuracy = new Property(8, Double.class, "speedAccuracy", false, "SPEED_ACCURACY");
        public final static Property IsUploaded = new Property(9, Boolean.class, "isUploaded", false, "IS_UPLOADED");
    }


    public MeasurementDao(DaoConfig config) {
        super(config);
    }

    public MeasurementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASUREMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIMESTAMP\" INTEGER," + // 1: timestamp
                "\"LATITUDE\" REAL," + // 2: latitude
                "\"LONGITUDE\" REAL," + // 3: longitude
                "\"LAT_LONG_ACCURACY\" REAL," + // 4: latLongAccuracy
                "\"ALTITUDE\" REAL," + // 5: altitude
                "\"ALTITUDE_ACCURACY\" REAL," + // 6: altitudeAccuracy
                "\"SPEED\" REAL," + // 7: speed
                "\"SPEED_ACCURACY\" REAL," + // 8: speedAccuracy
                "\"IS_UPLOADED\" INTEGER);"); // 9: isUploaded
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASUREMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Measurement entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }

        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }

        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }

        Double latLongAccuracy = entity.getLatLongAccuracy();
        if (latLongAccuracy != null) {
            stmt.bindDouble(5, latLongAccuracy);
        }

        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(6, altitude);
        }

        Double altitudeAccuracy = entity.getAltitudeAccuracy();
        if (altitudeAccuracy != null) {
            stmt.bindDouble(7, altitudeAccuracy);
        }

        Double speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(8, speed);
        }

        Double speedAccuracy = entity.getSpeedAccuracy();
        if (speedAccuracy != null) {
            stmt.bindDouble(9, speedAccuracy);
        }

        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(10, isUploaded ? 1L : 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Measurement entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }

        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }

        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }

        Double latLongAccuracy = entity.getLatLongAccuracy();
        if (latLongAccuracy != null) {
            stmt.bindDouble(5, latLongAccuracy);
        }

        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(6, altitude);
        }

        Double altitudeAccuracy = entity.getAltitudeAccuracy();
        if (altitudeAccuracy != null) {
            stmt.bindDouble(7, altitudeAccuracy);
        }

        Double speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(8, speed);
        }

        Double speedAccuracy = entity.getSpeedAccuracy();
        if (speedAccuracy != null) {
            stmt.bindDouble(9, speedAccuracy);
        }

        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(10, isUploaded ? 1L : 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Measurement readEntity(Cursor cursor, int offset) {
        Measurement entity = new Measurement( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // timestamp
                cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
                cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
                cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // latLongAccuracy
                cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // altitude
                cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // altitudeAccuracy
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // speed
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // speedAccuracy
                cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isUploaded
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Measurement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLatLongAccuracy(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setAltitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setAltitudeAccuracy(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setSpeed(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setSpeedAccuracy(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setIsUploaded(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
    }

    @Override
    protected final Long updateKeyAfterInsert(Measurement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Measurement entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Measurement entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
